@using TopicTalks.Web.Enums
@using TopicTalks.Web.Extensions
@model List<TopicTalks.Web.Models.QuestionModel>

<div class="container mt-5">
    <div class="text-center mb-3 w-50 m-auto">
        <input class="form-control text-center" style="height: 50px; font-size: 20px" type="text" id="searchInput" placeholder="Type anything to search">
    </div>
    <div id="questionContainer">
        @foreach (var item in Model)
        {
            <div id="question-@item.Question.QuestionId" class="q-list-container">
                <form asp-action="index" asp-controller="Question" method="post">
                    <div class="d-flex justify-content-between">
                        <p><strong>@(item.Question.User != null ? item.Question.User.Email : "Delete User")</strong></p>
                        <p>@($"{item.Question.CreatedAt.ToString("MMM dd, yyyy | hh:mm tt")} ({item.Question.CreatedAt.TimeAgo()})")</p>
                    </div>

                    <div class="form-group row">
                        <p>@item.Question.Explanation</p>
                    </div>

                    <div class="d-flex justify-content-between">
                        <div class="d-flex gap-2 topic">
                            @foreach (var topic in item.Question.Topic.SplitAndTrim())
                            {
                                <p>@topic</p>
                            }
                        </div>
                        <div>
                            <a href="/question/@item.Question.QuestionId" class="btn btn-primary">Answers</a>
                            @if (!item.HasTeachersResponse && (Context.UserRole() == RoleType.Moderator.ToString() || item.Question.UserId.ToString() == Context.UserId()))
                            {
                                <button type="button" class="btn btn-danger" onclick="deleteQuestion(@item.Question.QuestionId)">Delete</button>
                            }
                        </div>
                    </div>
                </form>
            </div>
        }
    </div>
</div>

<script>
    function fetchQuestions(searchText) {
        $.ajax({
            url: '/questions',
            method: 'GET',
            data: { searchText: searchText },
            dataType: 'json',
            success: function (questions) {
                $('#questionContainer').empty();

                if (questions.length === 0) {
                    $('#questionContainer').html('<h1 class="text-danger text-center">No questions found.</p>');
                    return;
                }

                questions.forEach(function (item) {
                    var topicsHtml = formatTopics(item.question.topic);

                    var questionHtml = `
                            <div class="q-list-container" id="question-${item.question.questionId}">
                                <form action="/question/${item.question.questionId}" method="post">
                                    <div class="d-flex justify-content-between">
                                        <p><strong>${item.question.user != null ? item.question.user.email : 'Delete User'}</strong></p>
                                        <p>${formatDate(item.question.createdAt)} (${timeAgo(item.question.createdAt)})</p>
                                    </div>
                                    <div class="form-group row">
                                         <p>${item.question.explanation}</p>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <div class="d-flex gap-2 topic">
                                            ${topicsHtml}
                                        </div>
                                        <div>
                                            <a href="/question/${item.question.questionId}" class="btn btn-primary">Answers</a>
                                        </div>
                                    </div>
                                </form>
                            </div>`;

                    $('#questionContainer').append(questionHtml);
                });
            },
            error: function (error) {
                console.error('Error fetching questions:', error);
            }
        });
    }

    function deleteQuestion(questionId) {
        $.ajax({
            url: `/delete-question?questionId=${questionId}`,
            method: 'DELETE',
            dataType: 'json',
            success: function () {
                $(`#question-${questionId}`).remove();
                toastMessage("Question Deleted!", ToastType.Success);
            },
            error: function (xhr) {
                errorMessage = xhr.responseText || "Internal server error. Please try again later.";
                toastMessage(errorMessage);
            }
        });
    }

    $(document).ready(function () {
        $('#searchInput').on('input', function () {
            var searchText = $(this).val();
            fetchQuestions(searchText);
        });
    });
</script>
