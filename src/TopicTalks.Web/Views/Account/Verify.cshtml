@using Microsoft.AspNetCore.Mvc.TagHelpers
@model TopicTalks.Web.ViewModels.VerifyViewModel

<div class="container mt-5">
    <div class="container-div" style="max-width: 430px;">
        <h2 class="mb-2 text-center title">Email Verification</h2>
        <form method="post" asp-action="Verify" id="otp-form" class="text-center">
            <p>Enter the 4-digit verification code that was sent to your email address.</p>

            <div class="otp-code mt-4">
                <input type="text" />
                <input type="text" />
                <input type="text" />
                <input type="text" />

                <a asp-controller="Home" asp-action="Dashboard" class="btn btn-warning mt-4 me-1 w-auto">Later</a>
                <button type="submit" class="btn btn-success mt-4 w-auto">Verify</button>
            </div>

            <div class="mt-3">
                Didn't receive code? <span class="link-text" onclick="resendCode()">Resend</span>
            </div>
        </form>
    </div>
</div>

@section Scripts
{
    <script>
        window.history.replaceState(null, '', window.location.pathname);

        var lastSentTime = 0;

        function resendCode() {
            var currentTime = new Date().getTime();
            var timeDifference = currentTime - lastSentTime;

            if (timeDifference < 30000) { // 30 seconds
                var secondsLeft = Math.ceil((30000 - timeDifference) / 1000);
                toastMessage("Please wait " + secondsLeft + " seconds before sending the next code.");
            } else {
                $.ajax({
                    url: '@Url.Action("Verify", "Account")',
                    type: 'POST',
                    success: () => {
                        toastMessage("Verification code has been sent to your email address. Please use it within 5 minutes.", ToastType.Primary);
                        lastSentTime = currentTime;
                    },
                    error: () => {
                        toastMessage("Failed to resend code. Please try again later.");
                    }
                });
            }
        }

        $('#otp-form').submit(function (e) {
            e.preventDefault();

            var inputs = $('.otp-code input[type="text"]');
            var allFilled = true;

            inputs.each(function () {
                if ($(this).val().length !== 1 || isNaN($(this).val())) {
                    allFilled = false;
                    return false;
                }
            });

            if (allFilled) {
                var code = inputs.map(function () {
                    return $(this).val();
                }).get().join('');

                $.ajax({
                    url: '@Url.Action("Verify", "Account")',
                    type: 'POST',
                    data: { Code: code },
                    success: function (response) {
                        toastMessageNext("Verification Successful!", ToastType.Success);
                        window.location.href = '@Url.Action("Dashboard", "Home")';
                    },
                    error: function (xhr) {
                        if (xhr.status === 400) {
                            toastMessage("Invalid verification code. Please try again.");
                        } else {
                            toastMessage("Internal server error. Please try again later.");
                        }
                    }
                });
            } else {
                toastMessage("Please fill out all the fields.");
            }
        });


        $('.otp-code input[type="text"]').attr({
            'maxlength': '1',
            'autocomplete': 'off',
            'aria-autocomplete': 'none'
        });

        const form = $('#otp-form');
        const inputs = form.find('input[type=text]');
        const submit = form.find('button[type=submit]');

        const handleKeyDown = function (e) {
            if (!/^[0-9]{1}$/.test(e.key) && e.key !== 'Backspace' && e.key !== 'Delete' && e.key !== 'Tab' && !e.metaKey) {
                e.preventDefault();
            }

            if (e.key === 'Delete' || e.key === 'Backspace') {
                const index = inputs.index(e.target);
                if (index > 0) {
                    inputs.eq(index - 1).val('').focus();
                }
            }
        };

        const handleInput = function (e) {
            const target = $(e.target);
            const index = inputs.index(target);
            if (target.val()) {
                if (index < inputs.length - 1) {
                    inputs.eq(index + 1).focus();
                } else {
                    submit.focus();
                }
            }
        };

        const handleFocus = function (e) {
            $(e.target).select();
        };

        const handlePaste = function (e) {
            e.preventDefault();
            const text = e.originalEvent.clipboardData.getData('text');
            if (!new RegExp(`^[0-9]{${inputs.length}}$`).test(text)) {
                return;
            }
            const digits = text.split('');
            inputs.each(function (index) {
                $(this).val(digits[index]);
            });
            submit.focus();
        };

        inputs.on('input', handleInput);
        inputs.on('keydown', handleKeyDown);
        inputs.on('focus', handleFocus);
        inputs.on('paste', handlePaste);
    </script>
}
