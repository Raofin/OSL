@using TopicTalks.Web.Common
@using TopicTalks.Web.Extensions
@using TopicTalks.Web.ViewModels
@model TopicTalks.Web.ViewModels.QuestionWithAnswersViewModel

@{
    var authorUsername = Model.UserInfo?.Username ?? "Delete User";
    var authorId = Model.UserInfo?.UserId.ToString() ?? "0";

    async Task RenderAnswers(List<AnswerWithRepliesViewModel> answers, int marginLeft = 0)
    {
        foreach (var answer in answers)
        {
            var answerAuthorId = answer.UserInfo?.UserId.ToString() ?? "0";
            var answerAuthorUsername = answer.UserInfo?.Username ?? "Delete User";

            <div id="answer-@(answer.AnswerId) parent-@(answer.ParentAnswerId)" class="rounded border p-3 mb-3" style="margin-left: @(marginLeft)px;">
                <div class="d-flex justify-content-between">
                    <p><strong>@(answerAuthorUsername)</strong> on <local-time utc-datetime="@answer.CreatedAt" format="2" time-ago="true"></local-time></p>
                    <div class="d-flex gap-2">
                        @if (Context.UserRole().Contains(RoleType.Moderator) || answerAuthorId == Context.UserId())
                        {
                            <span class="link text-danger" onclick="deleteAnswer(@(answer.AnswerId))" pop="delete" data-tippy-theme="red">
                                <i class="fi i-delete"></i>
                            </span>
                            <span class="link text-success" onclick="appendInput(@(Model.QuestionId), @(answer.AnswerId), true)" pop="Edit">
                                <i class="fi i-edit blue-hover" data-bs-trigger="hover focus" data-bs-placement="bottom" data-bs-content="Edit"></i>
                            </span>
                        }
                        @if (!Context.UserRole().Contains(RoleType.Moderator))
                        {
                            <span onclick="appendInput(@(Model.QuestionId), @(answer.AnswerId))" pop="Reply">
                                <i class="fi i-reply blue-hover" style="color: #333"></i>
                            </span>
                        }
                    </div>
                </div>
                <div class="form-group row">
                    <p id="explanation-@(answer.AnswerId)">@answer.Explanation</p>
                </div>
            </div>

            @if (answer?.Answers != null)
            {
                await RenderAnswers(answer.Answers, marginLeft + 50);
            }
            else
            {
                marginLeft = 0;
            }
        }
    }
}

<div class="container mt-5">
    <div id="question-details" class="question-container">
        <div id="question-container" question="@Model.QuestionId">
            <div class="d-flex justify-content-between">
                <p>
                    <strong>@(authorUsername)</strong><i id="edited-at">
                        @{
                            if (Model.UpdatedAt is not null)
                            {
                                <span>Edited <local-time utc-datetime="@Model.UpdatedAt.Value" format="" time-ago="true"></local-time></span>
                            }
                        }
                    </i>
                </p>
                <p><local-time utc-datetime="@Model.CreatedAt" format="3" time-ago="true"></local-time></p>
            </div>
            <div class="form-group row">
                <p id="explanation">@Model.Explanation</p>
            </div>
            <div class="d-flex justify-content-between">
                <div id="topics" class="d-flex gap-2 topic">
                    @foreach (var topic in Model.Topic.SplitAndTrim())
                    {
                        <p onclick="searchTag('@topic')">@topic</p>
                    }
                </div>
                <div class="d-flex gap-2">
                    @if (Context.UserRole().Contains(RoleType.Moderator) || (authorId == Context.UserId() && !Model.HasTeachersResponse))
                    {
                        <span class="link text-danger" onclick="deleteQuestion(@Model.QuestionId)" pop="Delete" data-tippy-theme="red">
                            <i class="fi i-delete"></i>
                        </span>
                    }
                    @if (Context.UserRole().Contains(RoleType.Moderator) || authorId == Context.UserId())
                    {
                        <span id="edit-question" class="link text-success blue-hover" pop="Edit">
                            <i class="fi i-edit"></i>
                        </span>
                    }
                    <span onclick="getPdf()" class="link blue-hover" pop="Print" style="color: indigo">
                        <i class="fi i-printer"></i>
                    </span>
                </div>
            </div>
        </div>

        <hr />

        <div id="answer-container">
            @{
                await RenderAnswers(Model.Answers);
            }
        </div>
        @if (!Context.UserRole().Contains(RoleType.Moderator))
        {
            <div id="answer-input" class="col-sm-9 w-100">
                <form id="answer-form" asp-action="PostAnswer" asp-controller="Answer" method="post">
                    <input type="hidden" name="questionId" value="@(Model.QuestionId)" />
                    <div class="text-center w-100">
                        <textarea id="reply-text" class="form-control mb-2" rows="3" placeholder="Write your answer here" name="explanation"></textarea>
                    </div>
                    <div class="text-center">
                        <button type="submit" class="btn btn-primary">Post Answer</button>
                    </div>
                </form>
            </div>
        }
    </div>
</div>
@section Scripts
{
    <script>
        function getPdf() {
            window.open('@Url.Action("GetPdf", "Question", new { questionId = Model.QuestionId })', '_blank');
        }

        $("#edit-question").on("click", function () {
            var questionId = $("#question-container").attr("question")
            var editedQuestion = appendQuestionEditInput(questionId)
        });

        function appendQuestionEditInput(questionId) {
            closeReplyInput();

            if (!$("#reply-input").length) {
                $("#question-container").append(`
                    <div id="reply-input">
                        <form id="reply-form" class="col-sm-9 w-100 d-flex">
                            <input type="hidden" name="questionId" value="${questionId}" />
                            <div class="text-center w-100">
                                <input type="text" id="question-topics" class="form-control mb-1" placeholder="Write your question topics here" name="topic" value="@Model.Topic" />
                                <textarea id="explanation-input" class="form-control mb-1" rows="3" placeholder="Write your reply here" name="explanation">@Model.Explanation</textarea>
                            </div>
                            <div class="text-center d-flex justify-content-between align-items-end" style ="width: 150px;">
                                <div>
                                    <button type="button" class="btn btn-primary mb-1 mt-1" style="width: 90px;" onclick="focusReplyTextArea()">Reply</button>
                                    <button type="button" class="btn btn-danger mb-1 mt-1" style="width: 90px;" onclick="closeReplyInput()">Close</button>
                                    <button type="submit" class="btn btn-success" style="width: 90px;">Confirm</button>
                                </div>
                            </div>
                        </form>
                    </div>`)

                $('#reply-form').validate({
                    rules: {
                        explanation: {
                            required: true,
                            minlength: 10
                        }
                    },
                    messages: {
                        explanation: {
                            required: "Please enter your question explanation",
                            minlength: "Question must be at least 10 characters"
                        }
                    },
                    submitHandler: (form) => {
                        $.ajax({
                            url: '@Url.Action("UpdateQuestion", "Question")',
                            type: 'PATCH',
                            data: $(form).serialize(),
                            success: (response) => {
                                $("#explanation").text(response.explanation)
                                $("#topics").html(formatTopics(response.topic))
                                $("#edited-at").text(" Edited (0 second ago)")
                                toastMessage("Edit Successful!", ToastType.Success)
                                closeReplyInput()
                            },
                            error: (xhr) => {
                                toastMessage('Internal server error. Please try again later.', ToastType.Error);
                            }
                        })
                    }
                })
            } else {
                closeReplyInput()
            }
        }

        function focusReplyTextArea() {
            closeReplyInput()
            $('#reply-text').focus()
        }

        function searchTag(searchText) {
            $('#questionContainer').empty();
            window.location.href = '@Url.Action("Dashboard", "Home")?searchQuery=' + searchText;
        }
    </script>
}
