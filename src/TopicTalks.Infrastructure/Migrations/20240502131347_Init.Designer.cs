// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TopicTalks.Infrastructure.Persistence;

#nullable disable

namespace TopicTalks.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240502131347_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TopicTalks.Domain.Entities.Answer", b =>
                {
                    b.Property<long>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnswerId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getUtcDate()");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNotified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<long?>("ParentAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers", "post");

                    b.HasData(
                        new
                        {
                            AnswerId = 1L,
                            CreatedAt = new DateTime(2024, 4, 5, 7, 10, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "Raspberry Pi OS (formerly known as Raspbian) is a Linux distribution specifically designed for the Raspberry Pi, based on Debian. It's optimized for the Pi's hardware, offering a lightweight desktop environment that's well-suited for its low-powered platform. Raspberry Pi OS includes special programs and kernel modules for HAT and additional hardware support, which other operating systems like Ubuntu or Arch Linux might not have. While Ubuntu and Arch Linux are also Linux distributions, they are not specifically tailored for the Raspberry Pi and may require modifications to work with its unique hardware and software environment. Therefore, Raspberry Pi OS is often the preferred choice for users looking for a seamless experience with their Raspberry Pi devices.",
                            IsNotified = true,
                            ParentAnswerId = 0L,
                            QuestionId = 1L,
                            UserId = 2L
                        },
                        new
                        {
                            AnswerId = 2L,
                            CreatedAt = new DateTime(2024, 4, 5, 7, 25, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam et fermentum dui. Ut orci quam, ornare sed lorem sed, hendrerit?",
                            IsNotified = true,
                            ParentAnswerId = 1L,
                            QuestionId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            AnswerId = 3L,
                            CreatedAt = new DateTime(2024, 4, 5, 7, 34, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam et.",
                            IsNotified = true,
                            ParentAnswerId = 2L,
                            QuestionId = 1L,
                            UserId = 4L
                        },
                        new
                        {
                            AnswerId = 4L,
                            CreatedAt = new DateTime(2024, 4, 5, 7, 46, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "Lorem ipsum dolor sit amet, consectetur adipiscing.",
                            IsNotified = true,
                            ParentAnswerId = 0L,
                            QuestionId = 1L,
                            UserId = 2L
                        },
                        new
                        {
                            AnswerId = 5L,
                            CreatedAt = new DateTime(2024, 4, 5, 7, 59, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "Lorem ipsum dolor sit amet.",
                            IsNotified = true,
                            ParentAnswerId = 4L,
                            QuestionId = 1L,
                            UserId = 5L
                        });
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.CloudFile", b =>
                {
                    b.Property<string>("CloudFileId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getUtcDate()");

                    b.Property<string>("DirectLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasComment("Bytes");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("WebContentLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WebViewLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CloudFileId");

                    b.HasIndex("UserId");

                    b.ToTable("CloudFiles", "core");
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.LogEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("LogEvents", (string)null);
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.Otp", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("dateAdd(minute, 5, getUtcDate())");

                    b.HasKey("Email");

                    b.ToTable("Otps", "auth");
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.Question", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getUtcDate()");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFileId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsNotified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("QuestionId");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions", "post");

                    b.HasData(
                        new
                        {
                            QuestionId = 1L,
                            CreatedAt = new DateTime(2024, 4, 5, 7, 1, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "What is the difference between Raspbian and other operating systems available for Raspberry Pi, like Ubuntu or Arch Linux?",
                            IsNotified = true,
                            Topic = "Raspberry Pi, Operating System, Raspbian",
                            UserId = 1L
                        },
                        new
                        {
                            QuestionId = 2L,
                            CreatedAt = new DateTime(2024, 4, 4, 7, 54, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "As a C# developer comfortable with Microsoft ecosystem, is Spring Boot worth exploring even though it uses Java? When might switching make sense, if ever?",
                            IsNotified = true,
                            Topic = "C#, Java, Spring Boot, Developer Experience",
                            UserId = 4L
                        },
                        new
                        {
                            QuestionId = 3L,
                            CreatedAt = new DateTime(2024, 3, 25, 8, 43, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "How does the use of timeouts help in preventing or resolving deadlocks?",
                            IsNotified = true,
                            Topic = "Deadlocks, Operating System",
                            UserId = 1L
                        },
                        new
                        {
                            QuestionId = 4L,
                            CreatedAt = new DateTime(2024, 3, 21, 5, 13, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "How do the transport layer and network layer protocols, such as TCP and IP, facilitate communication between processes in a network application?",
                            IsNotified = true,
                            Topic = "Computer Networks, TCP/IP, Network Layer Protocols",
                            UserId = 1L
                        },
                        new
                        {
                            QuestionId = 5L,
                            CreatedAt = new DateTime(2024, 3, 10, 11, 46, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "What is a transaction, and why is ACID compliance important in database management?",
                            IsNotified = true,
                            Topic = "RDBMS, Transaction, ACID, Database Management",
                            UserId = 5L
                        },
                        new
                        {
                            QuestionId = 6L,
                            CreatedAt = new DateTime(2024, 2, 27, 8, 27, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "What's the difference between a Deterministic Finite Automaton (DFA) and a Nondeterministic Finite Automaton (NFA)?",
                            IsNotified = true,
                            Topic = "HTTP, FTP, SMTP, Internet Communication",
                            UserId = 1L
                        },
                        new
                        {
                            QuestionId = 7L,
                            CreatedAt = new DateTime(2024, 2, 16, 6, 16, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "How does the V-model integrate testing activities into each phase of the development process?",
                            IsNotified = true,
                            Topic = "V-model, Testing, SDLC",
                            UserId = 5L
                        },
                        new
                        {
                            QuestionId = 8L,
                            CreatedAt = new DateTime(2024, 2, 12, 5, 18, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "Can Arduino boards communicate with each other or with other devices, and if so, how?",
                            IsNotified = true,
                            Topic = "Arduino, I2C, SPI, Embedded Systems",
                            UserId = 1L
                        },
                        new
                        {
                            QuestionId = 9L,
                            CreatedAt = new DateTime(2024, 1, 25, 5, 25, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "How does the Domain Name System (DNS) work, and why is it important for navigating the internet?",
                            IsNotified = true,
                            Topic = "Domain Name System, DNS, Computer Networks",
                            UserId = 4L
                        },
                        new
                        {
                            QuestionId = 10L,
                            CreatedAt = new DateTime(2024, 1, 17, 7, 1, 0, 0, DateTimeKind.Unspecified),
                            Explanation = "How do Hibernate's HQL (Hibernate Query Language) and Entity Framework's LINQ (Language Integrated Query) compare in terms of syntax and functionality for executing database queries?",
                            IsNotified = true,
                            Topic = "Hibernate, HQL, Entity Framework, LINQ, SQL",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", "enum");

                    b.HasData(
                        new
                        {
                            RoleId = 1L,
                            RoleName = "Student"
                        },
                        new
                        {
                            RoleId = 2L,
                            RoleName = "Teacher"
                        },
                        new
                        {
                            RoleId = 3L,
                            RoleName = "Moderator"
                        });
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getUtcDate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageFileId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Email");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Username");

                    b.ToTable("Users", "auth");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            CreatedAt = new DateTime(2024, 1, 27, 13, 13, 46, 462, DateTimeKind.Utc).AddTicks(5219),
                            Email = "hello@rawfin.net",
                            IsVerified = true,
                            PasswordHash = "AQAAAAIAAYagAAAAEH4sN4yXGhfbr83UweaRK6lW4ql9PztpEKWTR6SbkhWTiX1P0mWxRTm8gJr8O3SENg==",
                            Salt = "vFsYhyBIKKEYbGH4F5rQfR2Q5bAyZ4nH2Q0Vwo3kxxM=",
                            Username = "Rawfin"
                        },
                        new
                        {
                            UserId = 2L,
                            CreatedAt = new DateTime(2024, 1, 27, 13, 13, 46, 462, DateTimeKind.Utc).AddTicks(5226),
                            Email = "doe@topictalks.net",
                            IsVerified = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEH4sN4yXGhfbr83UweaRK6lW4ql9PztpEKWTR6SbkhWTiX1P0mWxRTm8gJr8O3SENg==",
                            Salt = "vFsYhyBIKKEYbGH4F5rQfR2Q5bAyZ4nH2Q0Vwo3kxxM=",
                            Username = "Doe"
                        },
                        new
                        {
                            UserId = 3L,
                            CreatedAt = new DateTime(2024, 1, 27, 13, 13, 46, 462, DateTimeKind.Utc).AddTicks(5229),
                            Email = "bob@topictalks.net",
                            IsVerified = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEH4sN4yXGhfbr83UweaRK6lW4ql9PztpEKWTR6SbkhWTiX1P0mWxRTm8gJr8O3SENg==",
                            Salt = "vFsYhyBIKKEYbGH4F5rQfR2Q5bAyZ4nH2Q0Vwo3kxxM=",
                            Username = "Bob"
                        },
                        new
                        {
                            UserId = 4L,
                            CreatedAt = new DateTime(2024, 1, 27, 13, 13, 46, 462, DateTimeKind.Utc).AddTicks(5231),
                            Email = "oec@topictalks.net",
                            IsVerified = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEH4sN4yXGhfbr83UweaRK6lW4ql9PztpEKWTR6SbkhWTiX1P0mWxRTm8gJr8O3SENg==",
                            Salt = "vFsYhyBIKKEYbGH4F5rQfR2Q5bAyZ4nH2Q0Vwo3kxxM=",
                            Username = "Oweo"
                        },
                        new
                        {
                            UserId = 5L,
                            CreatedAt = new DateTime(2024, 1, 27, 13, 13, 46, 462, DateTimeKind.Utc).AddTicks(5233),
                            Email = "eor@topictalks.net",
                            IsVerified = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEH4sN4yXGhfbr83UweaRK6lW4ql9PztpEKWTR6SbkhWTiX1P0mWxRTm8gJr8O3SENg==",
                            Salt = "vFsYhyBIKKEYbGH4F5rQfR2Q5bAyZ4nH2Q0Vwo3kxxM=",
                            Username = "Eorc"
                        });
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.UserDetail", b =>
                {
                    b.Property<long>("UserDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserDetailsId"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IdCardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InstituteName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserDetailsId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserDetails", "auth");

                    b.HasData(
                        new
                        {
                            UserDetailsId = 1L,
                            FullName = "Zaid Amin Rawfin",
                            IdCardNumber = "20-42459-1",
                            InstituteName = "AIUB",
                            UserId = 1L
                        },
                        new
                        {
                            UserDetailsId = 2L,
                            FullName = "Oweo Yec Wev",
                            IdCardNumber = "2020-55-3361",
                            InstituteName = "QWDA",
                            UserId = 4L
                        },
                        new
                        {
                            UserDetailsId = 3L,
                            FullName = "Voer Eor Oec",
                            IdCardNumber = "3-17655614-43",
                            InstituteName = "CREX",
                            UserId = 5L
                        });
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "auth");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            UserId = 2L,
                            RoleId = 2L
                        },
                        new
                        {
                            UserId = 3L,
                            RoleId = 3L
                        });
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.Answer", b =>
                {
                    b.HasOne("TopicTalks.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TopicTalks.Domain.Entities.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Answers_Users");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.CloudFile", b =>
                {
                    b.HasOne("TopicTalks.Domain.Entities.User", "User")
                        .WithMany("CloudFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.Question", b =>
                {
                    b.HasOne("TopicTalks.Domain.Entities.CloudFile", "ImageFile")
                        .WithMany("Questions")
                        .HasForeignKey("ImageFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TopicTalks.Domain.Entities.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ImageFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.User", b =>
                {
                    b.HasOne("TopicTalks.Domain.Entities.CloudFile", "ImageFile")
                        .WithMany("Users")
                        .HasForeignKey("ImageFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ImageFile");
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.UserDetail", b =>
                {
                    b.HasOne("TopicTalks.Domain.Entities.User", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("TopicTalks.Domain.Entities.UserDetail", "UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TopicTalks.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TopicTalks.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.CloudFile", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TopicTalks.Domain.Entities.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("CloudFiles");

                    b.Navigation("Questions");

                    b.Navigation("UserDetails");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
