// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OSL.DAL;

#nullable disable

namespace OSL.DAL.Migrations
{
    [DbContext(typeof(OslDbContext))]
    partial class OslDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OSL.DAL.Entities.Answer", b =>
                {
                    b.Property<long>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnswerId"));

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentAnswerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("AnswerId");

                    b.HasIndex("ParentAnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers", "post");
                });

            modelBuilder.Entity("OSL.DAL.Entities.Question", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions", "post");

                    b.HasData(
                        new
                        {
                            QuestionId = 1L,
                            CreatedAt = new DateTime(2024, 2, 11, 3, 10, 38, 884, DateTimeKind.Local).AddTicks(7274),
                            Explanation = "In C# 12, what are the advantages and trade-offs of using record types with pattern matching and deconstruction in ASP.NET 8 code, considering maintainability, readability, and potential performance implications? ",
                            Topic = "C# 12, Code Syntax, Maintainability",
                            UserId = 1L
                        },
                        new
                        {
                            QuestionId = 2L,
                            CreatedAt = new DateTime(2024, 2, 11, 3, 10, 38, 884, DateTimeKind.Local).AddTicks(7277),
                            Explanation = "With ASP.NET 8's improved request caching and HTTP caching strategies, in what scenarios could you effectively combine them to achieve optimal performance gains across different data access patterns (in-memory, database, external APIs)?",
                            Topic = "ASP.NET 8, HTTP Caching, Request Caching",
                            UserId = 1L
                        },
                        new
                        {
                            QuestionId = 3L,
                            CreatedAt = new DateTime(2024, 2, 11, 3, 10, 38, 884, DateTimeKind.Local).AddTicks(7279),
                            Explanation = "What are the use cases for ASP.NET 8's hot reload capability, and how can it improve development workflow and reduce downtime in production environments? ",
                            Topic = "ASP.NET 8, Development Workflow, Live Updates",
                            UserId = 1L
                        },
                        new
                        {
                            QuestionId = 4L,
                            CreatedAt = new DateTime(2024, 2, 11, 3, 10, 38, 884, DateTimeKind.Local).AddTicks(7280),
                            Explanation = "As a C# developer comfortable with Microsoft ecosystem, is Spring Boot worth exploring even though it uses Java? When might switching make sense, if ever?",
                            Topic = "C#, Java, Developer Experience",
                            UserId = 1L
                        },
                        new
                        {
                            QuestionId = 5L,
                            CreatedAt = new DateTime(2024, 2, 11, 3, 10, 38, 884, DateTimeKind.Local).AddTicks(7282),
                            Explanation = "When working with diverse data sources and integration needs, how do ASP.NET Core's Entity Framework Core and Spring Boot's Spring Data JPA compare in terms of ease of use, performance, and integration capabilities? ",
                            Topic = "ASP.NET, Spring Boot, Data Persistence",
                            UserId = 1L
                        },
                        new
                        {
                            QuestionId = 6L,
                            CreatedAt = new DateTime(2024, 2, 11, 3, 10, 38, 884, DateTimeKind.Local).AddTicks(7284),
                            Explanation = "How can you adapt React development for building mobile apps with React Native, desktop applications with Electron, or server-side rendering with Next.js?",
                            Topic = "React Ecosystem, Mobile Apps, Desktop Apps",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("OSL.DAL.Entities.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", "enum");

                    b.HasData(
                        new
                        {
                            RoleId = 1L,
                            RoleName = "Student"
                        },
                        new
                        {
                            RoleId = 2L,
                            RoleName = "Teacher"
                        },
                        new
                        {
                            RoleId = 3L,
                            RoleName = "Moderator"
                        });
                });

            modelBuilder.Entity("OSL.DAL.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users", "auth");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            CreatedAt = new DateTime(2024, 2, 11, 3, 10, 38, 884, DateTimeKind.Local).AddTicks(7182),
                            Email = "hello@rawfin.net",
                            PasswordHash = "AQAAAAIAAYagAAAAEH4sN4yXGhfbr83UweaRK6lW4ql9PztpEKWTR6SbkhWTiX1P0mWxRTm8gJr8O3SENg==",
                            Salt = "vFsYhyBIKKEYbGH4F5rQfR2Q5bAyZ4nH2Q0Vwo3kxxM="
                        });
                });

            modelBuilder.Entity("OSL.DAL.Entities.UserDetail", b =>
                {
                    b.Property<long>("UserDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserDetailsId"));

                    b.Property<string>("IdCardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InstituteName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserDetailsId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDetails", "auth");

                    b.HasData(
                        new
                        {
                            UserDetailsId = 1L,
                            IdCardNumber = "20-42459-1",
                            InstituteName = "AIUB",
                            Name = "Rawfin",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("OSL.DAL.Entities.UserRole", b =>
                {
                    b.Property<long>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserRoleId"));

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "auth");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1L,
                            RoleId = 1L,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("OSL.DAL.Entities.Answer", b =>
                {
                    b.HasOne("OSL.DAL.Entities.Answer", "ParentAnswer")
                        .WithMany("InverseParentAnswer")
                        .HasForeignKey("ParentAnswerId")
                        .HasConstraintName("FK_Answers_Answers1");

                    b.HasOne("OSL.DAL.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Answers_Questions");

                    b.HasOne("OSL.DAL.Entities.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Answers_Users");

                    b.Navigation("ParentAnswer");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OSL.DAL.Entities.Question", b =>
                {
                    b.HasOne("OSL.DAL.Entities.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Questions_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OSL.DAL.Entities.UserDetail", b =>
                {
                    b.HasOne("OSL.DAL.Entities.User", "User")
                        .WithMany("UserDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserDetails_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OSL.DAL.Entities.UserRole", b =>
                {
                    b.HasOne("OSL.DAL.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserRoles_Roles");

                    b.HasOne("OSL.DAL.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_UserRoles_Users");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OSL.DAL.Entities.Answer", b =>
                {
                    b.Navigation("InverseParentAnswer");
                });

            modelBuilder.Entity("OSL.DAL.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("OSL.DAL.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OSL.DAL.Entities.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Questions");

                    b.Navigation("UserDetails");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
