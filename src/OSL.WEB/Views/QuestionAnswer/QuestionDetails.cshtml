@using OSL.BLL.Enums
@using OSL.BLL.Models
@using OSL.WEB.Extensions
@model QuestionAnswerVM

@{
    var isCurrentUser = Context.UserId() == Model.Question.UserId.ToString();
    var isTeacher = Context.UserRole() == RoleType.Teacher.ToString();

    void RenderAnswers(List<AnswerVM> answers, int marginLeft = 0)
    {
        foreach (var answer in answers)
        {
            <div id="answer-@(answer.AnswerId) parent-@(answer.ParentAnswerId)" class="rounded border p-3 mb-3" style="margin-left: @(marginLeft)px;">
                <div class="d-flex justify-content-between">
                    <p><strong>@(answer.User?.Email ?? "Delete User")</strong> on @($"{answer.CreatedAt.ToString("MMM dd, yyyy")} ({answer.CreatedAt.TimeAgo()})")</p>
                    @if (isTeacher || isCurrentUser)
                    {
                        <div class="d-flex gap-2">
                            @if (Context.UserRole() == RoleType.Moderator.ToString() || answer.UserId.ToString() == Context.UserId())
                            {
                                <p><span class="link-text text-danger" onclick="deleteAnswer(@(answer.AnswerId))">Delete</span></p>
                            }
                            <p><span class="link-text" onclick="appendInput(@(answer.QuestionId), @(answer.AnswerId))">Reply</span></p>
                        </div>
                    }
                </div>
                <div class="form-group row">
                    <p id="explanation">@answer.Explanation</p>
                </div>
            </div>

            @if (answer.Answers != null)
            {
                RenderAnswers(answer.Answers, marginLeft + 50);
            }
            else
            {
                marginLeft = 0;
            }
        }
    }
}

<div class="container mt-5">
    <div id="question-details" class="q-list-container">
        <div class="d-flex justify-content-between">
            <p><strong>@(Model.Question.User?.Email ?? "Delete User")</strong></p>
            <p>@($"{Model.Question.CreatedAt.ToString("MMM dd, yyyy | hh:mm tt")} ({Model.Question.CreatedAt.TimeAgo()})")</p>
        </div>

        <div class="form-group row">
            <p>@Model.Question.Explanation</p>
        </div>

        <div class="d-flex justify-content-between">
            <div class="d-flex gap-2 topic">
                @foreach (var topic in Model.Question.Topic.SplitAndTrim())
                {
                    <p>@topic</p>
                }
            </div>
            @if (!Model.HasTeachersAnswer && (Context.UserRole() == RoleType.Moderator.ToString() || Model.Question.UserId.ToString() == Context.UserId()))
            {
                <div>
                    <button type="button" class="btn btn-danger" onclick="deleteQuestion(@Model.Question.QuestionId)">Delete</button>
                </div>
            }
        </div>
        <hr />

        <div id="answer-container">
            @{
                RenderAnswers(Model.AnswerVMs);
            }
        </div>

        @if (isTeacher || isCurrentUser)
        {
            <div id="answer-input" class="col-sm-9 w-100">
                <form action="/answer" method="post" id="answer-form">
                    <input type="hidden" name="questionId" value="@(Model.Question.QuestionId)" />
                    <div class="text-center w-100">
                        <textarea id="reply-text" class="form-control mb-2" rows="3" placeholder="Write your answer here" name="explanation"></textarea>
                    </div>
                    <div class="text-center">
                        <button type="submit" class="btn btn-primary">Post Answer</button>
                    </div>
                </form>
            </div>
        }
    </div>
</div>

<script>
    let selectedId = null;

    function appendInput(questionId, answerId) {
        if (selectedId != answerId) {
            selectedId = answerId;
            closeReplyInput();
        }

        if (!$("#reply-input").length) {
            $(`[id*='answer-${answerId}']`).append(`
                        <div id="reply-input">
                            <form id="reply-form" class="col-sm-9 w-100 d-flex">
                                <input type="hidden" name="questionId" value="${questionId}" />
                                <input type="hidden" name="parentAnswerId" value="${answerId}" />
                                <div class="text-center w-100">
                                        <textarea id="reply-text" class="form-control mb-1" rows="3" placeholder="Write your reply here" name="explanation"></textarea>
                                </div>
                                <div class="text-center">
                                    <button type="button" class="btn btn-danger w-75 mb-2 mt-1" onclick="closeReplyInput()">Close</button>
                                    <button type="submit" class="btn btn-primary w-75">Post</button>
                                </div>
                            </form>
                        </div>`);

            $('#reply-form').validate({
                rules: {
                    explanation: {
                        required: true,
                        minlength: 10
                    }
                },
                messages: {
                    explanation: {
                        required: "Please enter your explanation",
                        minlength: "Explanation must be at least 10 characters"
                    }
                },
                submitHandler: function (form) {
                    $.ajax({
                        url: '/answer',
                        type: 'POST',
                        data: $(form).serialize(),
                        success: function (response) {
                            appendReply(response);
                            toastMessage("Reply Submitted!", ToastType.Success);
                            closeReplyInput();
                        },
                        error: function (xhr) {
                            toastMessage(xhr.responseText);
                        }
                    });
                }
            });
        } else {
            closeReplyInput();
        }
    }

    $('#answer-form').validate({
        rules: {
            explanation: {
                required: true,
                minlength: 10
            }
        },
        messages: {
            explanation: {
                required: "Please enter your explanation",
                minlength: "Explanation must be at least 10 characters"
            }
        },
        submitHandler: function (form) {
            $.ajax({
                url: '/answer',
                type: 'POST',
                data: $(form).serialize(),
                success: function (response) {
                    appendAnswer(response);
                    toastMessage("Answer Submitted!", ToastType.Success);
                    $("#answer-form")[0].reset();
                },
                error: function (xhr) {
                    toastMessage(xhr.responseText);
                }
            });
        }
    });

    function closeReplyInput() {
        selectedId = null;
        $("#reply-input").remove();
    }

    function appendAnswer(response) {
        var answer = `
                <div id="answer-${response.answerId} parent-${response.parentAnswerId}" class="rounded border p-3 mb-3">
                    <div class="d-flex justify-content-between">
                        <p><strong>${response.email}</strong> on ${getFormattedDate()} (0 seconds ago)</p>
                        <div class="d-flex gap-2">
                            <span class="link-text text-danger" onclick="deleteAnswer(${response.AnswerId})">Delete</span>
                            <span class="link-text" onclick="appendInput(${response.questionId}, ${response.answerId})">Reply</span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <p>${response.explanation}</p>
                    </div>
                </div>`;

        $("#answer-container").append(answer);
    }

    function appendReply(response) {
        let marginLeftParent = parseFloat($(`[id*='answer-${response.parentAnswerId}']`).css('margin-left'));
        let marginLeft = marginLeftParent + 50;

        let reply = `
                    <div id="answer-${response.answerId}" class="rounded border p-3 mb-3" style="margin-left: ${marginLeft}px;">
                        <div class="d-flex justify-content-between">
                            <p><strong>${response.email}</strong> on ${getFormattedDate()} (0 seconds ago)</p>
                            <div class="d-flex gap-2">
                                <span class="link-text text-danger" onclick="deleteAnswer(${response.AnswerId})">Delete</span>
                                <span class="link-text" onclick="appendInput(${response.questionId}, ${response.answerId})">Reply</span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <p>${response.explanation}</p>
                        </div>
                    </div>`;

        $(`[id*='answer-${response.parentAnswerId}']`).after(reply);
    }

    function deleteQuestion(questionId) {
        $.ajax({
            url: `/delete-question?questionId=${questionId}`,
            method: 'DELETE',
            dataType: 'json',
            success: function () {
                toastMessageNext("Question Deleted!", ToastType.Success);
                window.location.href = '/';
            },
            error: function (xhr) {
                errorMessage = xhr.responseText || "Internal server error. Please try again later.";
                toastMessage(errorMessage);
            }
        });
    }

    function deleteAnswer(answerId) {
        $.ajax({
            url: `/delete-answer?answerId=${answerId}`,
            method: 'DELETE',
            dataType: 'json',
            success: function (response) {
                toastMessage("Answer Deleted!", ToastType.Success);
                $(`[id*='answer-${answerId}']`).remove();
                $(`[id*='parent-${answerId}']`).remove();
            },
            error: function (xhr) {
                errorMessage = xhr.responseText || "Internal server error. Please try again later.";
                toastMessage(errorMessage);
            }
        });
    }
</script>